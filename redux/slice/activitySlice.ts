// src/store/activitySlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";

export interface Activity {
  id?: number | null;
  tx_hash: string | null;
  from: string | null;
  to: string;
  amount: string;
  erc20_name?: string;
  erc20_symbol?: string;
  nonce?: number;
  status: "FAILED" | "PENDING" | "SUCCESS";
  account_id: number;
  user_id?: number;
  createdAt: any;
}

interface ActivityState {
  activities: Activity[];
}

const initialState: ActivityState = {
  activities: [],
};

const activitySlice = createSlice({
  name: "activities",
  initialState,
  reducers: {
    addActivity: (state, action: PayloadAction<Activity>) => {
      state.activities.unshift(action.payload);
    },
    addManyActivities: (state, action: PayloadAction<Activity[]>) => {
      state.activities = [...action.payload];
    },
    removeActivity: (state, action: PayloadAction<number>) => {
      state.activities = state.activities.filter(
        (activity) => activity.id !== action.payload
      );
    },
    changeActivityStatus: (
      state,
      action: PayloadAction<{ id: number; status: "FAILED" | "PENDING" | "SUCCESS" }>
    ) => {
      const activity = state.activities.find((a) => a.id === action.payload.id);
      if (activity) {
        activity.status = action.payload.status;
      }
    },
  },
});

// Export actions generated by createSlice
export const { addActivity, addManyActivities, removeActivity, changeActivityStatus } = activitySlice.actions;

// Reducer
export default activitySlice.reducer;

// Selectors to access activity state
export const selectActivities = (state: RootState) => state.activities.activities;
export const selectActivityById = (state: RootState, id: number) =>
  state.activities.activities.find((activity) => activity.id === id);
